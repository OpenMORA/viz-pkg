#ifndef CONTAINERMULTIPLE_H
#define CONTAINERMULTIPLE_H

//(*Headers(ContainerMultiple)
#include <wx/panel.h>
#include <wx/stattext.h>
//*)

#include <vector>
#include "Acciones.h"
#include "Instruccion.h"
#include "TextoYCombo.h"

namespace InterfazSancho	{
/**
  * This class contains a panel holding a variable number of combo boxes to select between the possible parameters used to configure a robot action.
  * It must be provided, on creation, with a Instruccion object which identifies the amount and type of the parameters needed.
  * The skeleton of this class is partly generated by Codeblocks.
  * \sa TextoYCombo, AccionRobot, Instruccion
  * \todo Nowadays, this class doesn't support "free string" parameters. This could be easily done by modifying the "TextoYCombo" class so that, whenever the action
  * type is set to "FREE_STRING" (or whichever the identifier is), the combo box would be changed to a text control. Also, the "TextoYCombo" class may be modified to
  * just allow writing any text in the combo box instead of choosing between a fixed set of strings.
  */
class ContainerMultiple: public wxPanel
{
	public:

		ContainerMultiple(const InstruccionPtr &p,wxWindow* parent,wxWindowID id=wxID_ANY,const wxPoint& pos=wxDefaultPosition,const wxSize& size=wxDefaultSize);	//!< Constructor.
		virtual ~ContainerMultiple()	{}	//!< Virtual destructor.

		//(*Declarations(ContainerMultiple)
		wxStaticText *label;	//!< Text label.
		//*)

		AccionRobotPtr getAccionRobot() const;	//!< Creates a robot action from the basic instruction and the specified parameters.
		void setValores(const std::vector<ParametroInstruccion> &a);	//!< Changes the parameter list, updating the combo boxes.

	protected:

		//(*Identifiers(ContainerMultiple)
		static const long ID_LABEL;
		//*)

	private:

		//(*Handlers(ContainerMultiple)
		//*)

		const InstruccionPtr instr;	//!< Instruction core.
		std::vector<TextoYCombo *> tycs;	//!< List of components.

		DECLARE_EVENT_TABLE()
};
}	//End of namespace
#endif
