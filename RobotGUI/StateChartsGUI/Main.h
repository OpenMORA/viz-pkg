#ifndef MAIN_H
#define MAIN_H

//(*Headers(Main)
#include <wx/panel.h>
#include <wx/button.h>
#include <wx/dialog.h>
#include <wx/string.h>
#include <wx/tglbtn.h>
#include <wx/listbox.h>
#include <wx/notebook.h>
//*)

#include <string>
#include <vector>

#include "PanelGraf.h"

namespace InterfazSancho	{
/**
  * This is the top level class of the InterfazSancho GUI. Although its name is kept for legacy reasons, it's clear that it will be changed in the near future. This
  * class inherits from wxPanel, which means that it's a component which can be placed anywhere in a wxWidgets GUI window. Since its duty is not to provide
  * functionality to the containing window, but to communicate directly with other software pieces using external communication, it has only a few public members,
  * which in fact aren't supposed to be called externally, but from other members of the GUI. Even so, there are some static methods (like 
  * AccionRobot::getAccionesDisponibles) which could be called from outside. Always keep in mind that this class is not 100% complete, and needs some additional code,
  * mostly communication-related.
  * The basic skeleton of this class has been generated by Codeblocks.
  * \bug The bitmap buttons don't appear. They should be present to the right of the tabbed panel.
  * \todo The "OnStop" code should send an instruction to stop the state machine. This needs communications.
  * \todo The "OnResume" code should send an instruction to resume the state machine. This needs communications.
  * \todo In the "OnSCXML" code there is a point in which additional communication code should be placed to send the code to some external application.
  * \todo Currently, the "botonesS" vector of buttons uses a wxToggleButton for each element. They should be replaced by wxCustomButtons so that they become toggleable
  * bitmap buttons.
  * \todo In the constructor, the GUI should do some communication to retrieve the instruction list and then pass it to AccionRobot::setAccionesDisponibles.
  * Additionally, it may want to get the available parameter list and then call AccionRobot::setArgumentosDisponibles. In the case of they not being available at the
  * time, it may be a good idea to start a timer to periodically try to get the list, stopping itself on the eventual success.
  * \sa PanelGraf
  */
class Main: public wxPanel
{
	public:

		Main(wxWindow* parent,wxWindowID id=wxID_ANY,const wxPoint& pos=wxDefaultPosition,const wxSize& size=wxDefaultSize);	//!< Constructor.
		virtual ~Main()	{}	//!< Virtual destructor.

		//(*Declarations(Main)

		//TODO: "botonesS" should be replaced by a vector of wxCustomButton, because they should be toggleable bitmap buttons
		/**
		  * Toggleable streak of buttons to switch between GUI states. They are present in the first tab panel, to the left of the main GUI.
		  * \sa PanelGraf::estado
		  */
		std::vector<wxToggleButton *> botonesS;
		std::vector<wxButton *> botonesE;	//!< Buttons in the second pane, to allow the creation of variables and events. A new button to set the new initial vaule for a variable may come in handy.
		PanelGraf *containerEstados;	//!< Main GUI.
		wxListBox *lEventos;	//!< List box with the list of custom events. Automatic events, such as those which appear when a robot action ends, will not appear here.
		wxListBox *lVars;	//!< List box with the list of custom variables. Automatic variables, such as those generated automatically by a "loop" simple state, will not appear here.
		wxNotebook *cp;	//!< Tabbed panel.
		//*)
		void getVariables(std::vector<wxString> &) const;	//!< Retrieves the list of variables. The strings come in the form "Variable=Value".
		void getEventos(std::vector<wxString> &) const;	//!< Retrieves the list of events.
		void nuevaVariable(const std::string &n,const std::string &v);	//!< Creates a new variable.
		void nuevoEvento(const std::string &);	//!< Creates a new event.

	protected:

		//(*Identifiers(Main)
		const static std::vector<long> IDS_S;
		const static std::vector<long> IDS_E;
		const static long ID_EVENTOS;
		const static long ID_VARS;
		const static long ID_STOP;
		const static long ID_RESUME;
		const static long ID_SCXML;
		const static long ID_PANELGRAF;
		//*)

	private:

		//(*Handlers(Main)
		//*)
		DECLARE_EVENT_TABLE()
		wxPanel *tabEstados(wxWindow *parent);	//!< Function to create the main GUI panel to control the state machine.
		wxPanel *tabEventos(wxWindow *parent);	//!< Function to create the second tab panel, which contains the variable and event definition GUI.
		/**
		  * This function creates the main GUI object. Although it currently calls just a constructor and returns the resulting pointer, it's keeped as an standalone
		  * procedure so that additional changes can specifically be applied to the panel.
		  * \sa PanelGraf
		  */
		PanelGraf *panelEstados(wxWindow *parent);

		/**
		  * This function changes the current GUI state, updating both this object and the underlying PanelGraf.
		  * \sa PanelGraf::estado
		  */
		void cambiarEstado(int);

		void OnStop(wxEvent &);
		void OnResume(wxEvent &);
		void OnAddVariable(wxEvent &);
		void OnRemoveVariable(wxEvent &);
		void OnAddEvent(wxEvent &);
		void OnRemoveEvent(wxEvent &);
		void OnOptions(wxEvent &);
		void OnSimple(wxEvent &);
		void OnCompound(wxEvent &);
		void OnParallel(wxEvent &);
		void OnDelete(wxEvent &);
		void OnTransition(wxEvent &);
		void OnSCXML(wxEvent &);
		void OnSCXMLWriteOk(wxEvent &);
		void OnSCXMLWriteCancel(wxEvent &);
};

/**
  * This small dialog box shows the SCXML code in a multiline text window, along with a streak of buttons.
  * Unlike most GUI classes, this object has been completely written from scratch. It's not intended to interact with any other dialog, as it does its job automatically.
  */
class SCXMLCodeDialog:public wxDialog	{
protected:
	const static long ID_OK;
	const static long ID_CANCEL;
	const static long ID_WRITE;
public:
	SCXMLCodeDialog(wxWindow *parent,const std::string &str);	//!< Constructor.
	inline ~SCXMLCodeDialog()	{}	//!< Virtual destructor.
private:
	void OnOK(wxEvent &);
	void OnCancel(wxEvent &);
	void OnWrite(wxEvent &);
};
}	//End of namespace
#endif
