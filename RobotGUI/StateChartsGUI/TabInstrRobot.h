#ifndef TABINSTRROBOT_H
#define TABINSTRROBOT_H

//(*Headers(TabInstrRobot)
#include <wx/panel.h>
#include <wx/dialog.h>
#include <wx/choicebk.h>
#include <wx/textctrl.h>
//*)

#include <string>
#include <vector>
#include <utility>
#include "Acciones.h"
#include "Instruccion.h"
#include "ContainerMultiple.h"

#include <mrpt/gui/WxUtils.h>

namespace InterfazSancho	{
/**
  * This class contains a piece of interface designed to configure a robot instruction. This class's skeleton is partly generated by codeblocks.
  * \sa AccionRobot, Instruccion, CDTabInstrRobot, TabInstrSCXML
  */
class TabInstrRobot: public wxPanel
{
	public:

		TabInstrRobot(const AccionRobotPtr &instr,wxWindow* parent);	//!< Constructor. If the first parameter is not null, the dialog starts configured correspondently.
		virtual ~TabInstrRobot()	{}	//!< Destructor.

		typedef void (*GenericFunctor)(void *);	//!< Generic functor typedef.
		/**
		  * Generic functor typedef with an argument. Each TabInstrRobot object calls its generic functor whenever the user interacts with the GUI.
		  */
		struct GenericFunctorWithArgument	{
		public:
			GenericFunctor fun;	//!< Function to be called.
			void *data;	//!< Argument to feed the function.
			inline GenericFunctorWithArgument(GenericFunctor f,void *d):fun(f),data(d)	{}	//!< Constructor.
			inline GenericFunctorWithArgument():fun(NULL),data(NULL)	{}	//!< Basic constructor.
		};

		//(*Declarations(TabInstrRobot)
		wxTextCtrl *tID;	//!< Control for the instruction label.
		wxChoicebook *cbAcc;	//!< Combo box for the different actions.
		//*)

		/**
		  * This function parses a string, as read from external software, and parses it into a list of available instructions and parameters.
		  * Returns true on success.
		  */
		static bool parse(const std::string &in,std::pair<std::vector<InstruccionPtr>,std::vector<ParametroInstruccion> > &out);
		/**
		  * This call sets the BASIC actions, and is provided only as a default. The set of actions should be overriden as soon as possible.
		  * Its original purpose, though, was to try to read the instructions from the net, returning true on success. Whenever the code is completely coupled with the
		  * external data of source, the code should be completed.
		  * \sa AccionRobot::setAccionesDisponibles, AccionRobot::setArgumentosDisponibles
		  */
		static bool setAcciones();
		/**
		  * This is a set of panels, each of which represents the configuration dialog for a concrete instruction.
		  * \sa ContainerMultiple
		  */
		std::vector<ContainerMultiple *> containers;
		InstruccionPtr getAccion() const;	//!< Get the selected instruction.
		inline std::string getID() const	{	//!< Get the label.
			return std::string(tID->GetValue().mbc_str());
		}
		inline void makeFocusAccion()	{	//!< Sets the focus on the combo box.
			cbAcc->SetFocus();
		}
		inline void makeFocusID()	{	//!< Sets the focus on the label control.
			tID->SetFocus();
		}
		void setAccion(const InstruccionPtr &);	//!< Changes the selected instruction.
		inline void setID(const std::string &str)	{	//!< Changes the label.
			tID->ChangeValue(_U(str.c_str()));
		}
		void setParametros(const std::vector<ParametroInstruccion> &);	//!< Changes the current instruction's parameters (this affects the current ContainerMultiple).
		AccionRobotPtr getAccionRobot() const;	//!< Gets the full robot action. May return NULL.
		inline void addEventListenerAccion(GenericFunctorWithArgument g)	{	//!< Sets the listener to be executed whenever the combo box changes its selection.
			actFun=g;
		}
		inline void addEventListenerID(GenericFunctorWithArgument g)	{	//!< Sets the listener to be executed whenever the label control changes its content.
			idFun=g;
		}
	protected:

		//(*Identifiers(TabInstrRobot)
		static const long ID_TID;
		static const long ID_COMBO;
		//*)

	private:

		//(*Handlers(TabInstrRobot)
		void OnTID(wxEvent &);
		void OnAct(wxEvent &);
		//*)

		GenericFunctorWithArgument idFun;	//!< Listener to be executed on label change.
		GenericFunctorWithArgument actFun;	//!< Listener to be executed on instruction change.

		DECLARE_EVENT_TABLE()
};

/**
  * Small dialog box containing just a TabInstrRobot object and a streak of OK/Cancel buttons. This class has been created from scratch.
  * \sa TabInstrRobot
  */
class CDTabInstrRobot:public wxDialog	{
protected:
	const static long ID_OK;
	const static long ID_CANCEL;
private:
	void OnOK(wxCommandEvent &);
	void OnCancel(wxCommandEvent &);
	DECLARE_EVENT_TABLE()
public:
	TabInstrRobot *base;	//!< Base object. It's common to call base->getAccionRobot, if ShowModal returns wxID_OK, to retrieve the selected instruction.
	CDTabInstrRobot(wxWindow *parent,const AccionRobotPtr &instr=AccionRobotPtr(NULL),const wxString &tit=_(""));	//!< Constructor.
	virtual ~CDTabInstrRobot()	{}	//!< Destructor.
};
}	//End of namespace
#endif
